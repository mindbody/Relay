#if !canImport(ObjectiveC)
import XCTest

extension CommandLineExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommandLineExtensionTests = [
        ("testOnlyParsesWithEligibleArgumentParsers", testOnlyParsesWithEligibleArgumentParsers),
        ("testParsesLaunchArguments", testParsesLaunchArguments),
        ("testThrowsParseErrors", testThrowsParseErrors),
    ]
}

extension DependencyContainerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DependencyContainerTests = [
        ("testComponentContainersFallBackToGlobalScope", testComponentContainersFallBackToGlobalScope),
        ("testLazyLoadsSingletonDependencies", testLazyLoadsSingletonDependencies),
        ("testRegistersTypes", testRegistersTypes),
        ("testRegistersTypesAtComponentScope", testRegistersTypesAtComponentScope),
        ("testRegistrationIsThreadSafe", testRegistrationIsThreadSafe),
        ("testResolutionIsThreadSafe", testResolutionIsThreadSafe),
        ("testResolvesLazyCircularDependencies", testResolvesLazyCircularDependencies),
        ("testSpawnsTransientDependencies", testSpawnsTransientDependencies),
    ]
}

extension DependencyInjectionInstructionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DependencyInjectionInstructionTests = [
        ("testParsesCommandLineIdentifiers", testParsesCommandLineIdentifiers),
        ("testThrowsForMissingFactory", testThrowsForMissingFactory),
        ("testThrowsForMissingType", testThrowsForMissingType),
        ("testThrowsOnMalformattedParameters", testThrowsOnMalformattedParameters),
        ("testThrowsOnUnrecognizedParameters", testThrowsOnUnrecognizedParameters),
    ]
}

extension DependencyInstructionLaunchArgumentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DependencyInstructionLaunchArgumentTests = [
        ("testFormatsInjectionInstructions", testFormatsInjectionInstructions),
    ]
}

extension DynamicDependencyIndexTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DynamicDependencyIndexTests = [
        ("testIndexesFactories", testIndexesFactories),
        ("testIndexesTypes", testIndexesTypes),
        ("testThrowsOnLookupsWhenFactoryIndexDoesNotExist", testThrowsOnLookupsWhenFactoryIndexDoesNotExist),
        ("testThrowsOnLookupsWhenTypeIndexDoesNotExist", testThrowsOnLookupsWhenTypeIndexDoesNotExist),
    ]
}

extension DynamicDependencyRegistryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DynamicDependencyRegistryTests = [
        ("testRegistersDynamicDependencies", testRegistersDynamicDependencies),
        ("testThrowsForUnknownFactories", testThrowsForUnknownFactories),
        ("testThrowsForUnknownTypes", testThrowsForUnknownTypes),
    ]
}

extension InjectDependenciesArgumentParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InjectDependenciesArgumentParserTests = [
        ("testBridgesDependencyInstructionsToDynamicRegistry", testBridgesDependencyInstructionsToDynamicRegistry),
        ("testCanOnlyParseDependencyFlags", testCanOnlyParseDependencyFlags),
        ("testThrowsForMissingDependencyInstructions", testThrowsForMissingDependencyInstructions),
    ]
}

extension LaunchArgumentBuilderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LaunchArgumentBuilderTests = [
        ("testBuildsCommandLineArguments", testBuildsCommandLineArguments),
    ]
}

extension OptionalExtensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptionalExtensionTests = [
        ("testErasedTypeIsWrappedType", testErasedTypeIsWrappedType),
        ("testUnwrapsUnderlyingTypeFromNestedOptionals", testUnwrapsUnderlyingTypeFromNestedOptionals),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CommandLineExtensionTests.__allTests__CommandLineExtensionTests),
        testCase(DependencyContainerTests.__allTests__DependencyContainerTests),
        testCase(DependencyInjectionInstructionTests.__allTests__DependencyInjectionInstructionTests),
        testCase(DependencyInstructionLaunchArgumentTests.__allTests__DependencyInstructionLaunchArgumentTests),
        testCase(DynamicDependencyIndexTests.__allTests__DynamicDependencyIndexTests),
        testCase(DynamicDependencyRegistryTests.__allTests__DynamicDependencyRegistryTests),
        testCase(InjectDependenciesArgumentParserTests.__allTests__InjectDependenciesArgumentParserTests),
        testCase(LaunchArgumentBuilderTests.__allTests__LaunchArgumentBuilderTests),
        testCase(OptionalExtensionTests.__allTests__OptionalExtensionTests),
    ]
}
#endif
